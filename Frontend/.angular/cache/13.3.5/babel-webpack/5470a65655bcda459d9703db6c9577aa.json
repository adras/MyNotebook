{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport * as CryptoJS from 'crypto-js';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./endpoint.service\";\nexport let MainService = /*#__PURE__*/(() => {\n  class MainService {\n    constructor(http, endpointService) {\n      this.http = http;\n      this.endpointService = endpointService;\n      this.apiPath = endpointService.getEndpointPath();\n    }\n\n    doLogin(event) {\n      // Note: Using SHA256 to hash passwords on the client side seems to be deprecated\n      // See: https://stackoverflow.com/a/43903139/7671671\n      // Who cares, if the backend is rewritten everything changes anyway\n      // Since it's not planned to update the backend right now, sha256 needs to be used\n      //CryptoJS.SHA256()\n      var shaPwd = CryptoJS.SHA256(event.password).toString(); //var shaPwd = sha256(password).toString();\n\n      const params = new HttpParams().set(\"action\", \"login\").set(\"password\", shaPwd);\n      const result = this.http.post(this.apiPath, params);\n      return result;\n    }\n\n    doLogout() {\n      const params = new HttpParams().set(\"action\", \"logout\");\n      const result = this.http.post(this.apiPath, params);\n      return result;\n    }\n\n    doQueryAll() {\n      const params = new HttpParams().set(\"action\", \"queryAll\");\n      const result = this.http.post(this.apiPath, params);\n      return result;\n    }\n\n  }\n\n  MainService.ɵfac = function MainService_Factory(t) {\n    return new (t || MainService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.EndpointService));\n  };\n\n  MainService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MainService,\n    factory: MainService.ɵfac,\n    providedIn: 'root'\n  });\n  return MainService;\n})();","map":null,"metadata":{},"sourceType":"module"}